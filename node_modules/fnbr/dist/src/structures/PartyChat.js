"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Base_1 = tslib_1.__importDefault(require("../client/Base"));
const SendMessageError_1 = tslib_1.__importDefault(require("../exceptions/SendMessageError"));
const AsyncLock_1 = tslib_1.__importDefault(require("../util/AsyncLock"));
const PartyMessage_1 = tslib_1.__importDefault(require("./PartyMessage"));
/**
 * Represents a party's multi user chat room (MUC)
 */
class PartyChat extends Base_1.default {
    /**
     * @param client The main client
     * @param party The chat room's party
     */
    constructor(client, party) {
        var _a, _b, _c;
        super(client);
        this.joinLock = new AsyncLock_1.default();
        this.joinLock.lock();
        this.party = party;
        this.jid = `Party-${(_a = this.party) === null || _a === void 0 ? void 0 : _a.id}@muc.prod.ol.epicgames.com`;
        this.nick = `${(_b = this.client.user) === null || _b === void 0 ? void 0 : _b.displayName}:${(_c = this.client.user) === null || _c === void 0 ? void 0 : _c.id}:${this.client.xmpp.resource}`;
        this.isConnected = false;
    }
    /**
     * Sends a message to this party chat
     * @param content The message that will be sent
     */
    async send(content) {
        await this.joinLock.wait();
        if (!this.isConnected)
            await this.join();
        const message = await this.client.xmpp.sendMessage(this.jid, content, 'groupchat');
        if (!message)
            throw new SendMessageError_1.default('Message timeout exceeded', 'PARTY', this.party);
        return new PartyMessage_1.default(this.client, {
            author: this.party.me, content, party: this.party, id: message.id,
        });
    }
    /**
     * Joins this party chat
     */
    async join() {
        this.joinLock.lock();
        await this.client.xmpp.joinMUC(this.jid, this.nick);
        this.isConnected = true;
        this.joinLock.unlock();
    }
    /**
     * Leaves this party chat
     */
    async leave() {
        await this.client.xmpp.leaveMUC(this.jid, this.nick);
        this.isConnected = false;
    }
}
exports.default = PartyChat;
//# sourceMappingURL=PartyChat.js.map