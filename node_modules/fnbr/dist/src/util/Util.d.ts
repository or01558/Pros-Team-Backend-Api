/// <reference types="node" />
import { Schema, ReplayData, STWItemRarity, STWSurvivorType, STWSurvivorSquads, STWHeroType, StatsPlaylistTypeData, STWItemTier, STWSchematicType, STWSchematicEvoType, STWSchematicSubType } from '../../resources/structs';
export declare const consoleQuestion: (question: string) => Promise<string>;
export declare const makeCamelCase: (obj: {
    [key: string]: any;
}) => any;
export declare const makeSnakeCase: (obj: {
    [key: string]: any;
}) => any;
export declare const getRandomDefaultCharacter: () => string;
export declare const createPartyInvitation: (clientUserId: string, pingerId: string, data: any) => {
    party_id: any;
    sent_by: string;
    sent_to: string;
    sent_at: any;
    updated_at: any;
    expires_at: any;
    status: string;
    meta: Schema;
};
export declare const parseBlurlStream: (stream: Buffer) => Promise<any>;
export declare const parseM3U8File: (data: string) => any;
export declare const buildReplay: (replayData: ReplayData, addStats: boolean) => Buffer;
export declare const parseSTWSurvivorTemplateId: (templateId: string) => {
    type: STWSurvivorType;
    tier: STWItemTier;
    rarity: STWItemRarity;
    name: string | undefined;
};
export declare const calcSTWSurvivorPowerLevel: (rarity: STWItemRarity, isLeader: boolean, level: number, tier: STWItemTier) => number;
export declare const calcSTWSurvivorBonus: (leaderPersonality: string, leaderRarity: string, survivorPersonality: string, survivorPowerLevel: number) => 0 | 2 | 4 | 8 | 3 | 5 | -2;
export declare const calcSTWSurvivorLeadBonus: (managerSynergy: string, squadName: keyof STWSurvivorSquads, powerLevel: number) => number;
export declare const parseSTWHeroTemplateId: (templateId: string) => {
    type: STWHeroType;
    tier: STWItemTier;
    rarity: STWItemRarity;
    name: string | undefined;
};
export declare const calcSTWNonSurvivorPowerLevel: (rarity: STWItemRarity, level: number, tier: STWItemTier) => number;
export declare function parseSTWSchematicTemplateId(templateId: string): {
    type: STWSchematicType;
    subType?: STWSchematicSubType;
    tier?: STWItemTier;
    evoType?: STWSchematicEvoType;
    rarity?: STWItemRarity;
    name?: string;
};
export declare const createDefaultInputTypeStats: () => {
    overall: {
        score: number;
        scorePerMin: number;
        scorePerMatch: number;
        wins: number;
        top3: number;
        top5: number;
        top6: number;
        top10: number;
        top12: number;
        top25: number;
        kills: number;
        killsPerMin: number;
        killsPerMatch: number;
        deaths: number;
        kd: number;
        matches: number;
        winRate: number;
        minutesPlayed: number;
        playersOutlived: number;
        lastModified: undefined;
    };
    solo: {
        score: number;
        scorePerMin: number;
        scorePerMatch: number;
        wins: number;
        top3: number;
        top5: number;
        top6: number;
        top10: number;
        top12: number;
        top25: number;
        kills: number;
        killsPerMin: number;
        killsPerMatch: number;
        deaths: number;
        kd: number;
        matches: number;
        winRate: number;
        minutesPlayed: number;
        playersOutlived: number;
        lastModified: undefined;
    };
    duo: {
        score: number;
        scorePerMin: number;
        scorePerMatch: number;
        wins: number;
        top3: number;
        top5: number;
        top6: number;
        top10: number;
        top12: number;
        top25: number;
        kills: number;
        killsPerMin: number;
        killsPerMatch: number;
        deaths: number;
        kd: number;
        matches: number;
        winRate: number;
        minutesPlayed: number;
        playersOutlived: number;
        lastModified: undefined;
    };
    squad: {
        score: number;
        scorePerMin: number;
        scorePerMatch: number;
        wins: number;
        top3: number;
        top5: number;
        top6: number;
        top10: number;
        top12: number;
        top25: number;
        kills: number;
        killsPerMin: number;
        killsPerMatch: number;
        deaths: number;
        kd: number;
        matches: number;
        winRate: number;
        minutesPlayed: number;
        playersOutlived: number;
        lastModified: undefined;
    };
    ltm: {
        score: number;
        scorePerMin: number;
        scorePerMatch: number;
        wins: number;
        top3: number;
        top5: number;
        top6: number;
        top10: number;
        top12: number;
        top25: number;
        kills: number;
        killsPerMin: number;
        killsPerMatch: number;
        deaths: number;
        kd: number;
        matches: number;
        winRate: number;
        minutesPlayed: number;
        playersOutlived: number;
        lastModified: undefined;
    };
};
export declare const parseStatKey: (key: string, value: number) => [keyof StatsPlaylistTypeData, (number | Date)];
