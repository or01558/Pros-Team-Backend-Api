import { Collection } from '@discordjs/collection';
import Base from './Base';
import Client from './Client';
import { AuthData, AuthType, AuthResponse } from '../../resources/structs';
/**
 * Represents the client's authentication manager
 * @private
 */
declare class Auth extends Base {
    /**
     * The client's active auth sessions
     */
    auths: Collection<AuthType, AuthData>;
    /**
     * A timeout that handles auth refreshing
     */
    private authRefreshTimeout?;
    /**
     * @param client The main client
     */
    constructor(client: Client);
    /**
     * Authenticates the client against EpicGames' API
     */
    authenticate(): Promise<AuthResponse>;
    /**
     * Force refreshes a single auth session
     * @param authData The authentication data
     * @param authType The authentication type
     */
    private refreshAuth;
    /**
     * Force refreshes all auth sessions
     */
    reauthenticate(): Promise<{
        response: {
            success: boolean;
        };
        error?: undefined;
    } | {
        error: import("../exceptions/EpicgamesAPIError").default;
        response?: undefined;
    }>;
    /**
     * Obtains an oauth token from EpicGames' OAuth API
     * @param grantType OAuth grant type such as `device_auth`, `exchange_code` or `authorization_code`
     * @param grantData Raw grant data.
     * @param authClient OAuth client such as `fortniteIOSGameClient`
     */
    private getOAuthToken;
    /**
     * Kills all active auth sessions
     */
    killAllTokens(): Promise<void>;
    /**
     * Checks if an OAuth token is valid. Refreshes it if needed
     * @param auth The auth type
     * @param forceVerify Whether the token should be verified via the Epicgames API
     */
    checkToken(auth: AuthType, forceVerify?: boolean): Promise<boolean>;
    /**
     * Accepts the Fortnite End User License Agreement (EULA)
     */
    private acceptEULA;
    /**
     * Creates a device auth
     */
    private createDeviceAuth;
    private exchangeAuth;
    /**
     * Authentication via a device auth
     * @param deviceAuthResolvable A resolvable device auth
     */
    private deviceAuthAuthenticate;
    /**
     * Authentication via an exchange code
     * @param exchangeCodeResolvable A resolvable exchange code
     */
    private exchangeCodeAuthenticate;
    /**
     * Authentication via an authorization code
     * @param authorizationCodeResolvable A resolvable authorization code
     */
    private authorizationCodeAuthenticate;
    /**
     * Authentication via a refresh token
     * @param refreshTokenResolvable A resolvable refresh token
     */
    private refreshTokenAuthenticate;
    /**
     * Authentication via a launcher refresh token
     * @param refreshTokenResolvable A resolvable refresh token
     */
    private launcherRefreshTokenAuthenticate;
}
export default Auth;
