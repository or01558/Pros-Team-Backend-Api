import { Stanzas, Constants } from 'stanza';
import Client from './Client';
import Base from './Base';
/**
 * Represents the client's XMPP manager
 * @private
 */
declare class XMPP extends Base {
    /**
     * XMPP agent
     */
    private stream?;
    /**
     * Whether the stream is being disconnected. Used to check if the stream was meant to be disconnected
     */
    private isDisconnecting;
    /**
     * Timestamp of the last XMPP connection
     */
    private connectedTimestamp?;
    /**
     * @param client The main client
     */
    constructor(client: Client);
    /**
     * Whether the XMPP agent is connected
     */
    get isConnected(): boolean;
    /**
     * Returns the xmpp JID
     */
    get JID(): string | undefined;
    /**
     * Returns the xmpp resource
     */
    get resource(): string | undefined;
    /**
     * Creates the XMPP agent and binds it to XMPP#stream.
     * Also registers all events
     */
    setup(): void;
    /**
     * Connects the XMPP agent to Epicgames' XMPP servers
     */
    connect(): Promise<{
        response?: boolean | undefined;
        error?: Error | Stanzas.StreamError | undefined;
    }>;
    /**
     * Disconnects the XMPP client.
     * Also performs a cleanup
     */
    disconnect(): Promise<{
        response?: boolean | undefined;
        error?: Error | undefined;
    }>;
    /**
     * Cleans everything up after the XMPP client disconnected
     */
    private destroy;
    /**
     * Registers all events
     */
    private setupEvents;
    /**
     * Waits for a friend to be added to the clients cache
     */
    private waitForFriend;
    /**
     * Sends a presence to all or a specific friend
     * @param status The status message. Can be undefined if you want to reset it
     * @param show The show type of the presence (eg "away")
     * @param to The JID of a specific friend
     */
    sendStatus(status?: object | string, show?: Constants.PresenceShow, to?: string): void;
    /**
     * Sends an XMPP message
     * @param to The message receiver's JID
     * @param content The message that will be sent
     * @param type The message type (eg "chat" or "groupchat")
     */
    sendMessage(to: string, content: string, type?: Constants.MessageType): Promise<Stanzas.Message | undefined>;
    /**
     * Wait until a message is sent
     * @param id The message id
     * @param timeout How long to wait for the message
     */
    waitForSentMessage(id: string, timeout?: number): Promise<Stanzas.Message | undefined>;
    /**
     * Joins a multi user chat room (MUC)
     * @param jid The room's JID
     * @param nick The client's nickname
     */
    joinMUC(jid: string, nick: string): Promise<Stanzas.ReceivedMUCPresence | undefined>;
    /**
     * Leaves a multi user chat room (MUC)
     * @param jid The room's JID
     * @param nick The client's nickname
     */
    leaveMUC(jid: string, nick: string): Promise<Stanzas.ReceivedPresence | undefined>;
}
export default XMPP;
