import { AxiosInstance, AxiosRequestConfig, Method, ResponseType } from 'axios';
import { EpicgamesAPIResponse, EpicgamesGraphQLResponse, HTTPResponse } from '../../resources/httpResponses';
import { AuthType } from '../../resources/structs';
import Base from './Base';
import Client from './Client';
interface KeyValuePair {
    [key: string]: any;
}
/**
 * Represents the client's HTTP manager
 * @private
 */
declare class HTTP extends Base {
    /**
     * The default requests options
     */
    options: AxiosRequestConfig;
    /**
     * The axios instance
     * @type {AxiosInstance}
     */
    axios: AxiosInstance;
    /**
     * @param {Client} client The main client
     */
    constructor(client: Client);
    /**
     * Sends a HTTP request
     * @param method The HTTP method
     * @param url The uri
     * @param headers The headers
     * @param body The body
     * @param form The form
     * @param responseType The axios response type
     * @param retries How many times this request has been retried
     */
    send(method: Method, url: string, headers?: KeyValuePair, body?: any, form?: KeyValuePair, responseType?: ResponseType, retries?: number): Promise<HTTPResponse>;
    /**
     * Sends a HTTP request to the Epicgames API
     * @param checkToken Whether the access token should be validated
     * @param method The HTTP method
     * @param url The uri
     * @param auth The auth type (eg. "fortnite" or "clientcreds")
     * @param headers The headers
     * @param data The body
     * @param form The form
     * @param ignoreLocks Where the request should ignore locks such as the reauth lock
     */
    sendEpicgamesRequest(checkToken: boolean, method: Method, url: string, auth?: AuthType, headers?: KeyValuePair, data?: any, form?: KeyValuePair, ignoreLocks?: boolean): Promise<EpicgamesAPIResponse>;
    /**
     * Sends a HTTP request to the Epicgames GraphQL API
     * @param checkToken Whether the access token should be validated
     * @param url The uri
     * @param query The GraphQL query string
     * @param variables The GraphQL variables
     * @param auth The auth type (eg. "fortnite" or "clientcreds")
     * @param operationName The GraphQL operation name (optional, will be auto set)
     * @param ignoreLocks Where the request should ignore locks such as the reauth lock
     */
    sendEpicgamesGraphQLRequest(checkToken: boolean, url: string, query: string, variables?: KeyValuePair, auth?: AuthType, operationName?: string, ignoreLocks?: boolean): Promise<EpicgamesGraphQLResponse>;
}
export default HTTP;
