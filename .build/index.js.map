{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import { config as Config } from \"dotenv\";\r\nimport Data_Structures from \"./Data-Structures/src/index.js\";\r\nimport Server, { Layers, Policies } from \"./src/classes/Server.js\";\r\nimport ServerRouter from \"./src/classes/ServerRouter.js\";\r\nimport Generator from \"./src/generators/Generator.js\";\r\nimport Analizier from \"./src/layers/Analizer.js\";\r\nimport Api from \"./src/layers/Api.js\";\r\nimport Connection from \"./src/layers/Connection.js\";\r\nimport Database from \"./src/layers/Database.js\";\r\nimport RESTApi from \"./src/rest/RESTApi.js\";\r\nimport testDatabase from \"./testDatabase.js\";\r\n\r\nconst { List } = Data_Structures;\r\n\r\n//creates and generates config for a new server with new RestApi and new KeyGen value\r\nConfig();\r\nconst server = new Server(new RESTApi(Generator.KeyGen.generate()));\r\nconst whitelist = server.getWhitelist();\r\nconst ips: string[] = [];\r\nif (whitelist) whitelist.forEach(v => {\r\n    if (v == null) return;\r\n    if (ips.length == 0) ips.unshift(v);\r\n    else ips.push(v);\r\n});\r\n\r\n//setup the server environment\r\nserver.setPort(5000);\r\nserver.setWhitelist(new List<string>().add(process.env.webServer || null).add(process.env.appServer || null));\r\nserver.setPolicy(Policies.Private);\r\nserver.setCorsPolicy({ origin: ips.length == 0 ? \"*\" : ips, methods: [\"GET\", \"POST\", \"DELETE\", \"PUT\"], credentials: true, maxAge: 120, preflightContinue: true, optionsSuccessStatus: 200 });\r\n\r\n//add listener for the server\r\nserver.listen(() => {\r\n\r\n    //add layers\r\n    server.addLayer(\"*\", Layers.Connection, new Connection());\r\n    server.addLayer(\"*\", Layers.RESTApi, new Api());\r\n    server.addLayer(\"*\", Layers.Database, new Database());\r\n    server.addLayer(\"*\", Layers.Analizier, new Analizier());\r\n\r\n    //set the a new server router with the rest api that runs after the Validater layer\r\n    server.setRouter(new ServerRouter(server.getRESTApi(), Layers.Analizier));\r\n\r\n    //connect to the database\r\n    Server.Database.get().connect(() => {\r\n\r\n        testDatabase();\r\n        //run the server\r\n        server.run();\r\n\r\n    });\r\n});\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,oBAAiC;AACjC,iBAA4B;AAC5B,oBAAyC;AACzC,0BAAyB;AACzB,uBAAsB;AACtB,sBAAsB;AACtB,iBAAgB;AAChB,wBAAuB;AACvB,sBAAqB;AACrB,qBAAoB;AACpB,0BAAyB;AAEzB,MAAM,EAAE,SAAS;AAGjB;AACA,MAAM,SAAS,IAAI,sBAAO,IAAI,uBAAQ,yBAAU,OAAO;AACvD,MAAM,YAAY,OAAO;AACzB,MAAM,MAAgB;AACtB,IAAI;AAAW,YAAU,QAAQ,OAAK;AAClC,QAAI,KAAK;AAAM;AACf,QAAI,IAAI,UAAU;AAAG,UAAI,QAAQ;AAAA;AAC5B,UAAI,KAAK;AAAA;AAIlB,OAAO,QAAQ;AACf,OAAO,aAAa,IAAI,OAAe,IAAI,QAAQ,IAAI,aAAa,MAAM,IAAI,QAAQ,IAAI,aAAa;AACvG,OAAO,UAAU,uBAAS;AAC1B,OAAO,cAAc,EAAE,QAAQ,IAAI,UAAU,IAAI,MAAM,KAAK,SAAS,CAAC,OAAO,QAAQ,UAAU,QAAQ,aAAa,MAAM,QAAQ,KAAK,mBAAmB,MAAM,sBAAsB;AAGtL,OAAO,OAAO,MAAM;AAGhB,SAAO,SAAS,KAAK,qBAAO,YAAY,IAAI;AAC5C,SAAO,SAAS,KAAK,qBAAO,SAAS,IAAI;AACzC,SAAO,SAAS,KAAK,qBAAO,UAAU,IAAI;AAC1C,SAAO,SAAS,KAAK,qBAAO,WAAW,IAAI;AAG3C,SAAO,UAAU,IAAI,4BAAa,OAAO,cAAc,qBAAO;AAG9D,wBAAO,SAAS,MAAM,QAAQ,MAAM;AAEhC;AAEA,WAAO;AAAA;AAAA;",
  "names": []
}
