{
  "version": 3,
  "sources": ["../../../../../src/rest/database/types/Varchar.ts"],
  "sourcesContent": ["import DBType from \"../classes/DBType.js\";\r\n\r\nexport class Varchar extends DBType<String>{\r\n    private chars: String[];\r\n    private count: number;\r\n    constructor(len: number) {\r\n        super(\"\");\r\n        this.chars = new Array(len);\r\n        this.count = 0;\r\n    };\r\n\r\n    getValue(): String {\r\n        const chars = this.chars;\r\n        let value = \"\";\r\n\r\n        chars.forEach(char => {\r\n            if (char.length > 1) throw new Error(\"VarChar Error: Char must be one length\");\r\n            value += char;\r\n        });\r\n\r\n        return value;\r\n    };\r\n\r\n    setValue(value: string): void {\r\n        if (value.length !== this.chars.length) throw new Error(\"VarChar Error: Cannot create value that is bigger then the varchar length\");\r\n        for (const char of value) {\r\n            this.add(char);\r\n        };\r\n        super.setValue(value);\r\n    };\r\n\r\n    add(char: string): Varchar {\r\n        if (char.length > 1) throw new Error(\"VarChar Error: Char must be one length\");\r\n        if ((this.count + 1) > this.chars.length) throw new Error(\"VarChar Error: Cannot create value that is bigger then the varchar length\");\r\n        this.chars[this.count] = char;\r\n        this.count++;\r\n        return this;\r\n    };\r\n\r\n};\r\n\r\nexport default function varchar(len: number): Varchar {\r\n    return new Varchar(len);\r\n}\r\n\r\n//const myVarChar = varchar(3).add(\"a\").add(\"b\").add(\"c\"); // value is abc\r\n//const otherVarChar = varchar(2).add(\"a\").add(\"b\").add(\"c\"); //throws an error varchar length is 2\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAmB;AAEZ,sBAAsB,sBAAc;AAAA,EAC/B;AAAA,EACA;AAAA,EACR,YAAY,KAAa;AACrB,UAAM;AACN,SAAK,QAAQ,IAAI,MAAM;AACvB,SAAK,QAAQ;AAAA;AAAA,EAGjB,WAAmB;AACf,UAAM,QAAQ,KAAK;AACnB,QAAI,QAAQ;AAEZ,UAAM,QAAQ,UAAQ;AAClB,UAAI,KAAK,SAAS;AAAG,cAAM,IAAI,MAAM;AACrC,eAAS;AAAA;AAGb,WAAO;AAAA;AAAA,EAGX,SAAS,OAAqB;AAC1B,QAAI,MAAM,WAAW,KAAK,MAAM;AAAQ,YAAM,IAAI,MAAM;AACxD,eAAW,QAAQ,OAAO;AACtB,WAAK,IAAI;AAAA;AACZ;AACD,UAAM,SAAS;AAAA;AAAA,EAGnB,IAAI,MAAuB;AACvB,QAAI,KAAK,SAAS;AAAG,YAAM,IAAI,MAAM;AACrC,QAAK,KAAK,QAAQ,IAAK,KAAK,MAAM;AAAQ,YAAM,IAAI,MAAM;AAC1D,SAAK,MAAM,KAAK,SAAS;AACzB,SAAK;AACL,WAAO;AAAA;AAAA;AAGd;AAEc,iBAAiB,KAAsB;AAClD,SAAO,IAAI,QAAQ;AAAA;",
  "names": []
}
