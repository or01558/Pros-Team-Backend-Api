{
  "version": 3,
  "sources": ["../../../../../src/rest/database/classes/DBObject.ts"],
  "sourcesContent": ["import Data_Structures from \"../../../../Data-Structures/src/index.js\";\r\nimport Generator from \"../../../generators/Generator.js\";\r\n\r\nexport type Reference = { dataType: string, object?: (id: string) => DBObject<any, any>, selfName: string, columnName: string, dependsOn?: boolean, list: boolean, defaultValues?: { name: string, values: Data_Structures.IObjectKeys } };\r\n\r\nexport default class DBObject<T extends DBObject<T, K>, K extends Data_Structures.IObjectKeys> {\r\n\r\n    #references: Data_Structures.List<Reference>;\r\n    #dataType: string;\r\n    #id: string | null;\r\n    properties: K | Data_Structures.IObjectKeys;\r\n    #state: string | null;\r\n\r\n\r\n    static createNull<U extends DBObject<U, V>, V extends Data_Structures.IObjectKeys>(id: string, dataType?: string): DBObject<U, V> {\r\n        return DBObject.createFrom({ id, dataType: dataType || \"\" });\r\n    };\r\n\r\n    static createFrom<U extends DBObject<U, V>, V extends Data_Structures.IObjectKeys>(obj: { dataType?: string, id?: string | null, properties?: Data_Structures.IObjectKeys, state?: string | null }): DBObject<U, V> {\r\n        const { dataType, id, properties, state } = obj;\r\n        const o = new DBObject<U, V>(dataType || \"\", id || null, properties || {}, state || null);\r\n        return o;\r\n    };\r\n\r\n    private createRefObject(datatype: string, values: Data_Structures.IObjectKeys) {\r\n        const obj: { datatype: string, value: Data_Structures.IObjectKeys } = { datatype, value: {} };\r\n        for (const property in values) {\r\n            obj.value[property] = values[property];\r\n        };\r\n        return obj;\r\n    }\r\n\r\n    private initValues(id: string, data: K | Data_Structures.IObjectKeys, references?: Data_Structures.List<Reference>): K | Data_Structures.IObjectKeys {\r\n        references?.forEach((reference) => {\r\n            const selfName = reference?.selfName;\r\n            if (reference && selfName) {\r\n                const current = data[selfName] || {};\r\n                let value: any;\r\n                if (reference.object && Object.keys(current).length !== 0) {\r\n                    const obj = reference.object(\"\");\r\n                    value = reference.list ? new Data_Structures.List<typeof obj>() : reference.object(data[selfName] ? data[selfName] : Generator.Ids.generate());\r\n                } else if (reference.defaultValues && !reference.object) {\r\n                    const obj = this.createRefObject(reference.dataType, reference.defaultValues.values);\r\n                    for (const property in current) {\r\n                        if (current[property] !== undefined) obj[\"value\"][property] = current[property];\r\n                    }\r\n                    value = obj;\r\n                };\r\n                //@ts-expect-errors\r\n                data[selfName] = value;\r\n            };\r\n        });\r\n        return data;\r\n    };\r\n\r\n    private initProperties(id: string, data: K | Data_Structures.IObjectKeys, references?: Data_Structures.List<Reference>) {\r\n        data = this.initValues(id, data, references);\r\n\r\n        references?.forEach(reference => {\r\n            if (reference && !reference.object) {\r\n                const { selfName, dataType } = reference;\r\n                const value = data[selfName];\r\n                //@ts-expect-errors\r\n                if (value && !(\"datatype\" in value)) data[value] = { datatype: dataType, value };\r\n            };\r\n        });\r\n\r\n        return data;\r\n    };\r\n\r\n    constructor(dataType: string, id: string | null, properties: K | Data_Structures.IObjectKeys = {}, state: string | null = null, references?: Data_Structures.List<Reference>) {\r\n        this.#references = references ? references : new Data_Structures.List<Reference>();\r\n        if (id)\r\n            properties = this.initProperties(id, properties, references);\r\n        this.#dataType = dataType;\r\n        this.#id = id;\r\n        this.properties = properties;\r\n        this.#state = null;\r\n        this.createFrom.bind(this);\r\n        this.getReferences.bind(this);\r\n        this.getDataType.bind(this);\r\n        this.getId.bind(this);\r\n        this.getProperties.bind(this);\r\n        this.getState.bind(this);\r\n        this.getProps.bind(this);\r\n        this.getValues.bind(this);\r\n        this.getPropsAndValues.bind(this);\r\n    };\r\n\r\n    createNull(id: string, datatype?: string): DBObject<T, K> {\r\n        return DBObject.createNull(id, datatype);\r\n    };\r\n\r\n    createFrom(obj: { dataType?: string, id?: string | null, properties?: Data_Structures.IObjectKeys, state?: string | null }): DBObject<T, K> {\r\n        return DBObject.createFrom(obj);\r\n    };\r\n\r\n    getReferences(): Data_Structures.List<Reference> {\r\n        return this.#references;\r\n    };\r\n\r\n    getDataType(): string {\r\n        return this.#dataType;\r\n    };\r\n\r\n    getId(): string | null {\r\n        return this.#id;\r\n    };\r\n\r\n    getProperties(): K | Data_Structures.IObjectKeys {\r\n        return this.properties;\r\n    };\r\n\r\n    getState(): string | null {\r\n        return this.#state;\r\n    };\r\n\r\n    getProps(sign: string = \"$\") {\r\n        const properties = this.properties;\r\n        let props = \"\";\r\n        for (const prop in properties) {\r\n            if (props === \"\")\r\n                props += `${prop}`;\r\n            else\r\n                props += ` ${sign} ${prop}`;\r\n        }\r\n        ;\r\n        return props;\r\n    };\r\n\r\n    getValues(sign: string = \"#\") {\r\n        const properties = this.properties;\r\n        let values = \"\";\r\n        for (const prop in properties) {\r\n            let value = properties[prop];\r\n            if (value instanceof DBObject || typeof value === \"object\") value = value instanceof Data_Structures.List ? this.getId() : (value instanceof DBObject ? value.getId() : value.value.id);\r\n            value = typeof value === \"string\" ? `\"${value}\"` : value;\r\n            if (values === \"\")\r\n                values += value;\r\n            else\r\n                values += ` ${sign} ${value}`;\r\n        }\r\n        ;\r\n        return values;\r\n    };\r\n\r\n    getPropsAndValues(propsSign: string = \"$\", valuesSign: string = \"#\") {\r\n        const props = this.getProps(propsSign);\r\n        const values = this.getValues(valuesSign).split(valuesSign);\r\n        const results = props.split(propsSign);\r\n        let str = \"\";\r\n        let i = 0;\r\n        results.forEach((prop) => {\r\n\r\n            results[i] = `${prop.trim()} ${propsSign} ${values[i].trim()}${results.indexOf(prop) < results.length - 1 ? valuesSign : \"\"} `;\r\n            i++;\r\n        });\r\n\r\n        results.forEach(result => {\r\n            str += result;\r\n        })\r\n\r\n        return str;\r\n\r\n    };\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,iBAA4B;AAC5B,uBAAsB;AAItB,eAA+F;AAAA;AAAA;AAAA;AAAA,EAK3F;AAAA;AAAA,SAIO,WAA4E,IAAY,UAAmC;AAC9H,WAAO,SAAS,WAAW,EAAE,IAAI,UAAU,YAAY;AAAA;AAAA,SAGpD,WAA4E,KAAiI;AAChN,UAAM,EAAE,UAAU,IAAI,YAAY,UAAU;AAC5C,UAAM,IAAI,IAAI,SAAe,YAAY,IAAI,MAAM,MAAM,cAAc,IAAI,SAAS;AACpF,WAAO;AAAA;AAAA,EAGH,gBAAgB,UAAkB,QAAqC;AAC3E,UAAM,MAAgE,EAAE,UAAU,OAAO;AACzF,eAAW,YAAY,QAAQ;AAC3B,UAAI,MAAM,YAAY,OAAO;AAAA;AAChC;AACD,WAAO;AAAA;AAAA,EAGH,WAAW,IAAY,MAAuC,YAA+E;AACjJ,6CAAY,QAAQ,CAAC,cAAc;AAC/B,YAAM,WAAW,uCAAW;AAC5B,UAAI,aAAa,UAAU;AACvB,cAAM,UAAU,KAAK,aAAa;AAClC,YAAI;AACJ,YAAI,UAAU,UAAU,OAAO,KAAK,SAAS,WAAW,GAAG;AACvD,gBAAM,MAAM,UAAU,OAAO;AAC7B,kBAAQ,UAAU,OAAO,IAAI,mBAAgB,SAAqB,UAAU,OAAO,KAAK,YAAY,KAAK,YAAY,yBAAU,IAAI;AAAA,mBAC5H,UAAU,iBAAiB,CAAC,UAAU,QAAQ;AACrD,gBAAM,MAAM,KAAK,gBAAgB,UAAU,UAAU,UAAU,cAAc;AAC7E,qBAAW,YAAY,SAAS;AAC5B,gBAAI,QAAQ,cAAc;AAAW,kBAAI,SAAS,YAAY,QAAQ;AAAA;AAE1E,kBAAQ;AAAA;AACX;AAED,aAAK,YAAY;AAAA;AACpB;AAAA;AAEL,WAAO;AAAA;AAAA,EAGH,eAAe,IAAY,MAAuC,YAA8C;AACpH,WAAO,KAAK,WAAW,IAAI,MAAM;AAEjC,6CAAY,QAAQ,eAAa;AAC7B,UAAI,aAAa,CAAC,UAAU,QAAQ;AAChC,cAAM,EAAE,UAAU,aAAa;AAC/B,cAAM,QAAQ,KAAK;AAEnB,YAAI,SAAS,CAAE,eAAc;AAAQ,eAAK,SAAS,EAAE,UAAU,UAAU;AAAA;AAC5E;AAAA;AAGL,WAAO;AAAA;AAAA,EAGX,YAAY,UAAkB,IAAmB,aAA8C,IAAI,QAAuB,MAAM,YAA8C;AAC1K,uBAAmB,aAAa,aAAa,IAAI,mBAAgB;AACjE,QAAI;AACA,mBAAa,KAAK,eAAe,IAAI,YAAY;AACrD,qBAAiB;AACjB,eAAW;AACX,SAAK,aAAa;AAClB,kBAAc;AACd,SAAK,WAAW,KAAK;AACrB,SAAK,cAAc,KAAK;AACxB,SAAK,YAAY,KAAK;AACtB,SAAK,MAAM,KAAK;AAChB,SAAK,cAAc,KAAK;AACxB,SAAK,SAAS,KAAK;AACnB,SAAK,SAAS,KAAK;AACnB,SAAK,UAAU,KAAK;AACpB,SAAK,kBAAkB,KAAK;AAAA;AAAA,EAGhC,WAAW,IAAY,UAAmC;AACtD,WAAO,SAAS,WAAW,IAAI;AAAA;AAAA,EAGnC,WAAW,KAAiI;AACxI,WAAO,SAAS,WAAW;AAAA;AAAA,EAG/B,gBAAiD;AAC7C,WAAO;AAAA;AAAA,EAGX,cAAsB;AAClB,WAAO;AAAA;AAAA,EAGX,QAAuB;AACnB,WAAO;AAAA;AAAA,EAGX,gBAAiD;AAC7C,WAAO,KAAK;AAAA;AAAA,EAGhB,WAA0B;AACtB,WAAO;AAAA;AAAA,EAGX,SAAS,OAAe,KAAK;AACzB,UAAM,aAAa,KAAK;AACxB,QAAI,QAAQ;AACZ,eAAW,QAAQ,YAAY;AAC3B,UAAI,UAAU;AACV,iBAAS,GAAG;AAAA;AAEZ,iBAAS,IAAI,QAAQ;AAAA;AAE7B;AACA,WAAO;AAAA;AAAA,EAGX,UAAU,OAAe,KAAK;AAC1B,UAAM,aAAa,KAAK;AACxB,QAAI,SAAS;AACb,eAAW,QAAQ,YAAY;AAC3B,UAAI,QAAQ,WAAW;AACvB,UAAI,iBAAiB,YAAY,OAAO,UAAU;AAAU,gBAAQ,iBAAiB,mBAAgB,OAAO,KAAK,UAAW,iBAAiB,WAAW,MAAM,UAAU,MAAM,MAAM;AACpL,cAAQ,OAAO,UAAU,WAAW,IAAI,WAAW;AACnD,UAAI,WAAW;AACX,kBAAU;AAAA;AAEV,kBAAU,IAAI,QAAQ;AAAA;AAE9B;AACA,WAAO;AAAA;AAAA,EAGX,kBAAkB,YAAoB,KAAK,aAAqB,KAAK;AACjE,UAAM,QAAQ,KAAK,SAAS;AAC5B,UAAM,SAAS,KAAK,UAAU,YAAY,MAAM;AAChD,UAAM,UAAU,MAAM,MAAM;AAC5B,QAAI,MAAM;AACV,QAAI,IAAI;AACR,YAAQ,QAAQ,CAAC,SAAS;AAEtB,cAAQ,KAAK,GAAG,KAAK,UAAU,aAAa,OAAO,GAAG,SAAS,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,IAAI,aAAa;AACzH;AAAA;AAGJ,YAAQ,QAAQ,YAAU;AACtB,aAAO;AAAA;AAGX,WAAO;AAAA;AAAA;",
  "names": []
}
