{
  "version": 3,
  "sources": ["../../../../../src/rest/database/classes/DBTable.ts"],
  "sourcesContent": ["import { Varchar } from \"../types/Varchar.js\";\r\nimport DBColumn from \"./DBColumn.js\";\r\n\r\nexport interface ColumnsData {\r\n    [name: string]: DBColumn;\r\n};\r\n\r\n\r\nexport interface ConstraintsData {\r\n    [name: string]: string;\r\n};\r\n\r\nexport const VarcharType = function varchar(len: number) : DBColumn{\r\n    return {\r\n        type: Varchar,\r\n        _sql_type_name: `varchar(${len})`,\r\n    };\r\n}\r\n\r\nexport const BigIntType: DBColumn = {\r\n    type: BigInt,\r\n    _sql_type_name: \"bigint\",\r\n};\r\n\r\nexport const BooleanType: DBColumn = {\r\n    type: Boolean,\r\n    _sql_type_name: \"boolean\",\r\n};\r\n\r\n\r\nexport const DateTimeType: DBColumn = {\r\n    type: Date,\r\n    _sql_type_name: \"datetime\",\r\n};\r\n\r\nexport default class DBTable {\r\n\r\n    private name: string;\r\n    private types: ColumnsData;\r\n    private constraints: any;\r\n\r\n    constructor(name: string, types: ColumnsData, constraints: ConstraintsData) {\r\n        this.name = name;\r\n        this.types = types;\r\n        this.constraints = constraints;\r\n        this.getName.bind(this);\r\n        this.getTypes.bind(this);\r\n        this.getConstraints.bind(this);\r\n        this.getColumns.bind(this);\r\n    }\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    };\r\n\r\n\r\n    getTypes(): ColumnsData {\r\n        return this.types;\r\n    };\r\n\r\n    getConstraints(): any {\r\n        return this.constraints;\r\n    };\r\n\r\n    getColumns(): string {\r\n        const types = this.types;\r\n        const constraints = this.constraints;\r\n        let columns = \"\";\r\n        for (const name in types) {\r\n            const dbColumn = types[name];\r\n            \r\n            let column = `${name.includes(\"\\\"\") ? `\"${name}\"` : name} ${dbColumn._sql_type_name} ${constraints[name] || \"\"}`;\r\n            if (columns === \"\") columns += column;\r\n            else columns += `, ${column}`;\r\n        };\r\n\r\n        return columns;\r\n    };\r\n};\r\n\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAwB;AAKvB;AAKA;AAEM,MAAM,cAAc,iBAAiB,KAAuB;AAC/D,SAAO;AAAA,IACH,MAAM;AAAA,IACN,gBAAgB,WAAW;AAAA;AAAA;AAI5B,MAAM,aAAuB;AAAA,EAChC,MAAM;AAAA,EACN,gBAAgB;AAAA;AAGb,MAAM,cAAwB;AAAA,EACjC,MAAM;AAAA,EACN,gBAAgB;AAAA;AAIb,MAAM,eAAyB;AAAA,EAClC,MAAM;AAAA,EACN,gBAAgB;AAAA;AAGpB,cAA6B;AAAA,EAEjB;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,MAAc,OAAoB,aAA8B;AACxE,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,cAAc;AACnB,SAAK,QAAQ,KAAK;AAClB,SAAK,SAAS,KAAK;AACnB,SAAK,eAAe,KAAK;AACzB,SAAK,WAAW,KAAK;AAAA;AAAA,EAGzB,UAAkB;AACd,WAAO,KAAK;AAAA;AAAA,EAIhB,WAAwB;AACpB,WAAO,KAAK;AAAA;AAAA,EAGhB,iBAAsB;AAClB,WAAO,KAAK;AAAA;AAAA,EAGhB,aAAqB;AACjB,UAAM,QAAQ,KAAK;AACnB,UAAM,cAAc,KAAK;AACzB,QAAI,UAAU;AACd,eAAW,QAAQ,OAAO;AACtB,YAAM,WAAW,MAAM;AAEvB,UAAI,SAAS,GAAG,KAAK,SAAS,OAAQ,IAAI,UAAU,QAAQ,SAAS,kBAAkB,YAAY,SAAS;AAC5G,UAAI,YAAY;AAAI,mBAAW;AAAA;AAC1B,mBAAW,KAAK;AAAA;AACxB;AAED,WAAO;AAAA;AAAA;AAEd;",
  "names": []
}
