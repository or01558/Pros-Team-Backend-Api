{
  "version": 3,
  "sources": ["../../../../src/rest/database/Database.ts"],
  "sourcesContent": ["import Data_Structures from \"../../../Data-Structures/src/index.js\";\r\nimport DBObject, { Reference } from \"./classes/DBObject.js\";\r\nimport Tables from \"./classes/Tables.js\";\r\nimport DBClient from \"./client/Client.js\";\r\n\r\nexport type Client = DBClient;\r\n\r\nexport default class Database {\r\n    static Client = DBClient;\r\n    static Tables = Tables;\r\n    static DBObject = DBObject;\r\n\r\n    #client: DBClient;\r\n\r\n    constructor(client: DBClient) {\r\n        this.#client = client;\r\n        Database.Tables.Client = client;\r\n        this.get.bind(this);\r\n        this.isConnected.bind(this);\r\n        this.getReference.bind(this);\r\n        this.getObject.bind(this);\r\n        this.getObjectsById.bind(this);\r\n        this.getObjects.bind(this);\r\n        this.#getRefObject.bind(this);\r\n        this.createObject.bind(this);\r\n        this.deleteObject.bind(this);\r\n        this.clearObjects.bind(this);\r\n        this.updateObject.bind(this);\r\n        this.findObject.bind(this);\r\n        this.findObjects.bind(this);\r\n    };\r\n\r\n    get() {\r\n        return this.#client;\r\n    };\r\n\r\n    isConnected() {\r\n        return this.#client.connected;\r\n    };\r\n\r\n    async getReference(id: string, properties: Data_Structures.IObjectKeys, reference: Reference): Promise<Data_Structures.IObjectKeys | undefined> {\r\n        if (reference && reference.selfName) {\r\n            const createFunction = reference.object;\r\n            let result = await this.getObjectsById(createFunction ? createFunction(id) : DBObject.createFrom({ dataType: reference.dataType, id }), reference.columnName);\r\n            if (result) {\r\n                if (reference.list) {\r\n                    properties[reference.selfName] = result;\r\n                } else\r\n                    properties[reference.selfName] = result.size == 1 ? result.get(0) : result;\r\n                return properties;\r\n            } else if (reference.list) properties[reference.selfName] = new Data_Structures.List();\r\n            return properties;\r\n        };\r\n    };\r\n\r\n    async findObject<U extends DBObject<U, V>, V extends Data_Structures.IObjectKeys>(obj: U, callback: (obj: U | null) => boolean): Promise<U | null> {\r\n        const objects = await this.getObjects(obj);\r\n        if (!objects) return null;\r\n       return objects.delete((value) => {\r\n            return !callback(value);\r\n        }).first();\r\n    };\r\n\r\n    async findObjects<U extends DBObject<U, V>, V extends Data_Structures.IObjectKeys>(obj: U, callback: (obj: U | null) => boolean): Promise<Data_Structures.List<U> | null> {\r\n        const objects = await this.getObjects(obj);\r\n        if (!objects) return null;\r\n        return objects.delete((value) => {\r\n            return !callback(value);\r\n        });\r\n\r\n    };\r\n\r\n\r\n    getObject<U extends DBObject<U, V>, V extends Data_Structures.IObjectKeys>(obj: U, columnName?: string): Promise<U | null> {\r\n        return new Promise<U | null>(async (resolve, reject) => {\r\n            this.#client.query(`SELECT * FROM ${obj.getDataType()} WHERE ${columnName ? columnName : \"id\"} = ${`\"${obj.getId()}\"` || \"\"}`).then(async (results: any) => {\r\n                if (results && results.length > 0 && results[0]) {\r\n                    const { id } = results[0];\r\n                    delete results[0].id;\r\n                    let properties = results[0];\r\n                    for (const prop of properties) {\r\n                        if (prop.includes(\"`\")) {\r\n                            const updatedProp = prop.replace(\"`\", \"\").replace(\"`\", \"\");\r\n                            properties[updatedProp] = properties[prop];\r\n                            delete properties[prop];\r\n                        };\r\n                    };\r\n                    const dbObject = obj.createFrom({ id });\r\n                    const references = dbObject.getReferences();\r\n                    for (let i = 0; i < references.size; i++) {\r\n                        const reference = references.get(i);\r\n                        if (reference)\r\n                            await this.getReference(id, properties, reference);\r\n                    }\r\n\r\n                    resolve((dbObject.createFrom({ id, properties }) as U));\r\n                }\r\n                else\r\n                    resolve(null);\r\n            }).catch((err: unknown) => reject(err));\r\n        });\r\n    };\r\n\r\n    getObjectsById<U extends DBObject<U, V>, V extends Data_Structures.IObjectKeys>(obj: U, columnName?: string): Promise<Data_Structures.List<U> | null> {\r\n        return new Promise<Data_Structures.List<U> | null>((resolve, reject) => {\r\n            this.#client.query(`SELECT * FROM ${obj.getDataType()} WHERE ${columnName ? columnName : \"id\"} = ${`\"${obj.getId()}\"` || \"\"}`).then(async (results: any) => {\r\n                if (results !== undefined && results.length > 0) {\r\n                    const dbObjects = new Data_Structures.List<U>();\r\n                    results.forEach(async (result: any) => {\r\n                        if (result) {\r\n                            const { id } = result;\r\n                            delete result.id;\r\n                            const properties = result;\r\n                            for (const prop of properties) {\r\n                                if (prop.includes(\"`\")) {\r\n                                    const updatedProp = prop.replace(\"`\", \"\").replace(\"`\", \"\");\r\n                                    properties[updatedProp] = properties[prop];\r\n                                    delete properties[prop];\r\n                                };\r\n                            };\r\n                            const dbObject = obj.createFrom({ id });\r\n                            const references = dbObject.getReferences();\r\n                            references.forEach(async (reference) => {\r\n                                if (reference)\r\n                                    await this.getReference(id, properties, reference);\r\n                            });\r\n                            dbObjects.add((dbObject.createFrom({ id, properties }) as U));\r\n                        }\r\n                        ;\r\n                    });\r\n                    resolve(dbObjects);\r\n                }\r\n                else\r\n                    resolve(null);\r\n            }).catch((err: unknown) => reject(err));\r\n        });\r\n    };\r\n\r\n    getObjects<U extends DBObject<U, V>, V extends Data_Structures.IObjectKeys>(obj: U): Promise<Data_Structures.List<U> | null> {\r\n        return new Promise<Data_Structures.List<U> | null>((resolve, reject) => {\r\n            this.#client.query(`SELECT * FROM ${obj.getDataType()}}`).then(async (results: any) => {\r\n                if (results !== undefined && results.length > 0) {\r\n                    const dbObjects = new Data_Structures.List<U>();\r\n                    for (const result of results) {\r\n                        if (result) {\r\n                            const { id } = result;\r\n                            const dbObject = (await this.getObject(obj.createFrom({ id })) as U);\r\n                            dbObjects.add(dbObject);\r\n                        };\r\n                    };\r\n                    resolve(dbObjects);\r\n                }\r\n                else\r\n                    resolve(null);\r\n            }).catch((err: unknown) => reject(err));\r\n        });\r\n    };\r\n\r\n    #getRefObject<U extends DBObject<U, V>, V extends Data_Structures.IObjectKeys>(value: any): U | Data_Structures.List<U> | null {\r\n        const condition = ((typeof value === \"object\" && value) && (\"datatype\" in value) && (\"value\" in value && !(value.value instanceof DBObject)));\r\n        if (value instanceof DBObject) return (value as U);\r\n        else if (value instanceof Data_Structures.List<U>) {\r\n            for (let i = 0; i < value.size; i++) {\r\n                const obj = this.#getRefObject(value.get(i));\r\n                value.set(i, obj);\r\n            };\r\n            return value;\r\n        }\r\n\r\n        return condition ? (new DBObject(value.datatype, value.value.id, Object.fromEntries(Object.entries(value.value).filter(([key, value]) => key !== \"id\"))) as U) : null;\r\n    };\r\n\r\n    createObject<U extends DBObject<U, V>, V extends Data_Structures.IObjectKeys>(obj: U): Promise<U> {\r\n        return new Promise<U>(async (resolve, reject) => {\r\n            const id = obj.getId();\r\n            if (typeof id !== \"string\" || id.length == 0)\r\n                return reject(\"DatabaseError: Cannot Create an object with null id\");\r\n            this.#client.query(`INSERT INTO ${obj.getDataType()} VALUES (\"${id}\", ${obj.getValues(\",\")})`).then(async () => {\r\n                const properties = obj.getProperties();\r\n                for (const property in properties) {\r\n                    const value = properties[property];\r\n                    const refObject = this.#getRefObject(value);\r\n                    if (!refObject) continue;\r\n                    if (refObject instanceof Data_Structures.List<U>) {\r\n                        refObject.forEach(async (v) => {\r\n                            if (v) await this.createObject((v as U));\r\n                        });\r\n                    } else await this.createObject((refObject as U));\r\n                };\r\n                resolve(obj);\r\n            }).catch((err: unknown) => reject(err));\r\n        });\r\n    };\r\n\r\n    deleteObject<U extends DBObject<U, V>, V extends Data_Structures.IObjectKeys>(obj: U, columnName?: string): Promise<DBObject<U, V>> {\r\n        return new Promise<U>((resolve, reject) => {\r\n            this.#client.query(`DELETE FROM ${obj.getDataType()} WHERE ${columnName ? columnName : \"id\"} = \"${obj.getId()}\"`).then(async () => {\r\n                const references = obj.getReferences();\r\n                for (let i = 0; i < references.size; i++) {\r\n                    const reference = references.get(i);\r\n                    if (reference && reference.dependsOn) {\r\n                        const id = obj.getId();\r\n                        const createFunction = reference.object;\r\n                        if (id == null)\r\n                            continue;\r\n                        await this.deleteObject(createFunction ? createFunction(id) : DBObject.createFrom({ dataType: reference.dataType, id }), reference.columnName);\r\n                    }\r\n                };\r\n                resolve(obj);\r\n            }).catch((err: unknown) => reject(err));\r\n        });\r\n    };\r\n\r\n    clearObjects<U extends DBObject<U, V>, V extends Data_Structures.IObjectKeys>(obj: U): Promise<DBObject<U, V>> {\r\n        return new Promise<DBObject<U, V>>((resolve, reject) => {\r\n            this.#client.query(`DELETE FROM ${obj.getDataType()}`).then(async () => {\r\n                const references = obj.getReferences();\r\n                for (let i = 0; i < references.size; i++) {\r\n                    const reference = references.get(i);\r\n                    if (reference)\r\n                        await this.clearObjects((DBObject.createFrom({ dataType: reference.dataType, id: null }) as U));\r\n                };\r\n                resolve(obj.createFrom({ state: \"success\", id: null }));\r\n            }).catch((err: unknown) => reject(err));\r\n        });\r\n    };\r\n\r\n    updateObject<U extends DBObject<U, V>, V extends Data_Structures.IObjectKeys>(obj: U, columnName?: string): Promise<DBObject<U, V>> {\r\n        return new Promise<DBObject<U, V>>((resolve, reject) => {\r\n            this.#client.query(`UPDATE ${obj.getDataType()} SET ${Tables.replaceWords(obj.getPropsAndValues(\"=\", \",\"))} WHERE  ${columnName ? columnName : \"id\"} = \"${obj.getId()}\"`).then(async (result: any) => {\r\n                const references = obj.getReferences();\r\n                for (let i = 0; i < references.size; i++) {\r\n                    const reference = references.get(i);\r\n                    if (reference && reference.selfName) {\r\n                        const value = obj.getProperties()[`${reference.selfName}`];\r\n                        const refObject = this.#getRefObject(value);\r\n                        if (!refObject) continue;\r\n                        if (refObject instanceof Data_Structures.List) {\r\n                            if (refObject.size == 0) {\r\n                                await this.clearObjects((DBObject.createFrom({ dataType: reference.dataType, id: null }) as U));\r\n                                continue;\r\n                            };\r\n                            refObject.forEach(async (v) => {\r\n                                if (v) {\r\n                                    await this.updateObject((v as U));\r\n                                }\r\n                            });\r\n                        } else await this.updateObject((refObject as U));\r\n                    }\r\n                };\r\n\r\n                if (result && (\"affectedRows\" in result && result.affectedRows == 0 && result.changedRows == 0)) return resolve(await this.createObject(obj));\r\n                resolve(obj);\r\n            }).catch((err: unknown) => reject(err));\r\n        });\r\n    }\r\n    ;\r\n}\r\n;\r\n//# sourceMappingURL=Database.js.map"],
  "mappings": "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",
  "names": []
}
