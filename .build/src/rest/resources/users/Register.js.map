{
  "version": 3,
  "sources": ["../../../../../src/rest/resources/users/Register.ts"],
  "sourcesContent": ["import express from \"express\";\r\nimport Server from \"../../../classes/Server\";\r\nimport Data_Structures from \"../../../../Data-Structures/src\";\r\nimport RequestHandler from \"../../../classes/RequestHandler\";\r\nimport UserObject from \"../../database/objects/users/UserObject\";\r\nimport Generator from \"../../../generators/Generator\";\r\n\r\n\r\n//{username: {type:\"string\", value:{minLength: 2}, email:{type:\"string\", value:{regexs:[/@.+\\./]}, password:{type:\"string\", value:{minLength: 8, regexs:[/^[a-z]+$/i,  /^[0-9]+$/i]}}\r\nexport default class Register extends RequestHandler {\r\n\r\n    constructor(requset: express.Request, response: express.Response, next: express.NextFunction) {\r\n        super(requset, response, next);\r\n    }\r\n    \r\n\r\n    private getValidBody() {\r\n        return {\r\n            username: {\r\n                type: \"string\", value: { minLength: 2 },\r\n            },\r\n            email: {\r\n                type: \"string\", value: { regexs: [/@.+\\./] }\r\n            },\r\n            password: { type: \"string\", value: { minLength: 8, regexs: [/^[a-z]+$/i, /^[0-9]+$/i] } },\r\n        }\r\n    };\r\n\r\n    private getDataKeys() {\r\n        return [\"username\", \"email\", \"password\"];\r\n    };\r\n\r\n    private validateRequestData(requestData: Data_Structures.IObjectKeys): boolean | express.Response {\r\n        const DATA_KEYS = this.getDataKeys();\r\n\r\n        for (const key of DATA_KEYS) {\r\n            if (!requestData[key]) return this.response.status(404) //...;\r\n            if (typeof requestData[key] !== \"string\") return this.response.status(404) //...;\r\n        };\r\n\r\n        const checks = [this.checkUsername(requestData.username), this.checkPassword(requestData.password), this.checkEmail(requestData.email)];\r\n\r\n        for (const check of checks) {\r\n            if (typeof check !== \"boolean\" && check || !check) return false;\r\n        };\r\n\r\n        return true;\r\n    };\r\n\r\n    private checkUsername(username: string): boolean | express.Response {\r\n        if (username.length < 2) return this.response.status(404) //...;\r\n        return true;\r\n    };\r\n\r\n    private checkPassword(password: string): boolean | express.Response {\r\n\r\n        if (password.length < 8) return this.response.status(404)//...;\r\n\r\n        const lettersRegex = /^[a-z]+$/i;\r\n        const numbersRegex = /^[0-9]+$/i;\r\n\r\n\r\n        if (!lettersRegex.test(password)) return this.response.status(404)//...;\r\n        if (!numbersRegex.test(password)) return this.response.status(404)//...;\r\n\r\n        return true;\r\n    };\r\n\r\n    private checkEmail(email: string): boolean | express.Response {\r\n        const emailRegex = /@.+\\./;\r\n        if (!emailRegex.test(email)) return this.response.status(404) //...;\r\n        return true;\r\n    };\r\n\r\n    public async call(): Promise<any> {\r\n\r\n        const { request, response, next } = this;\r\n        if (request.method !== \"POST\") return //...;\r\n        const { requestData } = request.body;\r\n        if (!requestData) return //...;\r\n        const success = this.validateRequestData(requestData);\r\n        if (typeof success === \"boolean\" && success) {\r\n            try {\r\n                const db = Server.Database;\r\n                const { username, password, email } = requestData;\r\n                await db.createObject(new UserObject(Generator.Ids.generate({ unique: true }), { username, password, email }));\r\n                return response.status(200).json({ message: \"Success!\", reason: \"User Created\", requested: \"User Registeration\", provided: \"Valid User Details\", status: 200 });\r\n            } catch (err) {\r\n                console.log(err, \"server error\");\r\n                return response.status(500).send({ message: \"Something Went Wrong\", reason: \"An Error Occurred\", requested: \"Server Resource\", provided: \"none\", status: 500 });\r\n            };\r\n        };\r\n        //register user..\r\n    }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,oBAAmB;AAEnB,4BAA2B;AAC3B,wBAAuB;AACvB,uBAAsB;AAItB,uBAAsC,8BAAe;AAAA,EAEjD,YAAY,SAA0B,UAA4B,MAA4B;AAC1F,UAAM,SAAS,UAAU;AAAA;AAAA,EAIrB,eAAe;AACnB,WAAO;AAAA,MACH,UAAU;AAAA,QACN,MAAM;AAAA,QAAU,OAAO,EAAE,WAAW;AAAA;AAAA,MAExC,OAAO;AAAA,QACH,MAAM;AAAA,QAAU,OAAO,EAAE,QAAQ,CAAC;AAAA;AAAA,MAEtC,UAAU,EAAE,MAAM,UAAU,OAAO,EAAE,WAAW,GAAG,QAAQ,CAAC,aAAa;AAAA;AAAA;AAAA,EAIzE,cAAc;AAClB,WAAO,CAAC,YAAY,SAAS;AAAA;AAAA,EAGzB,oBAAoB,aAAsE;AAC9F,UAAM,YAAY,KAAK;AAEvB,eAAW,OAAO,WAAW;AACzB,UAAI,CAAC,YAAY;AAAM,eAAO,KAAK,SAAS,OAAO;AACnD,UAAI,OAAO,YAAY,SAAS;AAAU,eAAO,KAAK,SAAS,OAAO;AAAA;AACzE;AAED,UAAM,SAAS,CAAC,KAAK,cAAc,YAAY,WAAW,KAAK,cAAc,YAAY,WAAW,KAAK,WAAW,YAAY;AAEhI,eAAW,SAAS,QAAQ;AACxB,UAAI,OAAO,UAAU,aAAa,SAAS,CAAC;AAAO,eAAO;AAAA;AAC7D;AAED,WAAO;AAAA;AAAA,EAGH,cAAc,UAA8C;AAChE,QAAI,SAAS,SAAS;AAAG,aAAO,KAAK,SAAS,OAAO;AACrD,WAAO;AAAA;AAAA,EAGH,cAAc,UAA8C;AAEhE,QAAI,SAAS,SAAS;AAAG,aAAO,KAAK,SAAS,OAAO;AAErD,UAAM,eAAe;AACrB,UAAM,eAAe;AAGrB,QAAI,CAAC,aAAa,KAAK;AAAW,aAAO,KAAK,SAAS,OAAO;AAC9D,QAAI,CAAC,aAAa,KAAK;AAAW,aAAO,KAAK,SAAS,OAAO;AAE9D,WAAO;AAAA;AAAA,EAGH,WAAW,OAA2C;AAC1D,UAAM,aAAa;AACnB,QAAI,CAAC,WAAW,KAAK;AAAQ,aAAO,KAAK,SAAS,OAAO;AACzD,WAAO;AAAA;AAAA,QAGE,OAAqB;AAE9B,UAAM,EAAE,SAAS,UAAU,SAAS;AACpC,QAAI,QAAQ,WAAW;AAAQ;AAC/B,UAAM,EAAE,gBAAgB,QAAQ;AAChC,QAAI,CAAC;AAAa;AAClB,UAAM,UAAU,KAAK,oBAAoB;AACzC,QAAI,OAAO,YAAY,aAAa,SAAS;AACzC,UAAI;AACA,cAAM,KAAK,sBAAO;AAClB,cAAM,EAAE,UAAU,UAAU,UAAU;AACtC,cAAM,GAAG,aAAa,IAAI,0BAAW,yBAAU,IAAI,SAAS,EAAE,QAAQ,SAAS,EAAE,UAAU,UAAU;AACrG,eAAO,SAAS,OAAO,KAAK,KAAK,EAAE,SAAS,YAAY,QAAQ,gBAAgB,WAAW,sBAAsB,UAAU,sBAAsB,QAAQ;AAAA,eACpJ,KAAP;AACE,gBAAQ,IAAI,KAAK;AACjB,eAAO,SAAS,OAAO,KAAK,KAAK,EAAE,SAAS,wBAAwB,QAAQ,qBAAqB,WAAW,mBAAmB,UAAU,QAAQ,QAAQ;AAAA;AAC5J;AAAA;AACJ;AAAA;AAAA;",
  "names": []
}
