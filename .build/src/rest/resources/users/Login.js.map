{
  "version": 3,
  "sources": ["../../../../../src/rest/resources/users/Login.ts"],
  "sourcesContent": ["import express from \"express\";\r\nimport Data_Structures from \"../../../../Data-Structures/src\";\r\nimport RequestHandler from \"../../../classes/RequestHandler\";\r\nimport Server from \"../../../classes/Server\";\r\nimport DBObject from \"../../database/classes/DBObject\";\r\nimport UserObject, { User } from \"../../database/objects/users/UserObject\";\r\n\r\n\r\nexport default class Login extends RequestHandler {\r\n\r\n    constructor(requset: express.Request, response: express.Response, next: express.NextFunction) {\r\n        super(requset, response, next);\r\n    }\r\n\r\n    private getDataKeys() {\r\n        return [\"username\", \"password\"];\r\n    };\r\n\r\n    private validateRequestData(requestData: Data_Structures.IObjectKeys): boolean | express.Response {\r\n        const DATA_KEYS = this.getDataKeys();\r\n\r\n        for (const key of DATA_KEYS) {\r\n            if (!requestData[key]) return this.response.status(404) //...;\r\n            if (typeof requestData[key] !== \"string\") return this.response.status(404) //...;\r\n        };\r\n\r\n        return true;\r\n    };\r\n\r\n    public async call(): Promise<any> {\r\n        const { request, response, next } = this;\r\n        if (request.method !== \"POST\") return //...;\r\n        const { requestData } = request.body;\r\n        if (!requestData) return //...;\r\n        const success = this.validateRequestData(requestData);\r\n        if (typeof success === \"boolean\" && success) {\r\n            try {\r\n                const db = Server.Database;\r\n                const { username, password } = requestData;\r\n\r\n                const user = await db.findObject<UserObject, User>(new UserObject(), (user) => user !== null && user.getUsername() === username && user.comparePasswords(password));\r\n                if (user == null) return this.response.status(401) //...;\r\n                //create user access & refresh tokens and return the access token\r\n                return response.status(200).json({ message: \"Success!\", reason: \"User Created\", requested: \"User Registeration\", provided: \"Valid User Details\", status: 200 });\r\n            } catch (err) {\r\n                console.log(err, \"server error\");\r\n                return response.status(500).send({ message: \"Something Went Wrong\", reason: \"An Error Occurred\", requested: \"Server Resource\", provided: \"none\", status: 500 });\r\n            };\r\n        };\r\n    }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAEA,4BAA2B;AAC3B,oBAAmB;AAEnB,wBAAiC;AAGjC,oBAAmC,8BAAe;AAAA,EAE9C,YAAY,SAA0B,UAA4B,MAA4B;AAC1F,UAAM,SAAS,UAAU;AAAA;AAAA,EAGrB,cAAc;AAClB,WAAO,CAAC,YAAY;AAAA;AAAA,EAGhB,oBAAoB,aAAsE;AAC9F,UAAM,YAAY,KAAK;AAEvB,eAAW,OAAO,WAAW;AACzB,UAAI,CAAC,YAAY;AAAM,eAAO,KAAK,SAAS,OAAO;AACnD,UAAI,OAAO,YAAY,SAAS;AAAU,eAAO,KAAK,SAAS,OAAO;AAAA;AACzE;AAED,WAAO;AAAA;AAAA,QAGE,OAAqB;AAC9B,UAAM,EAAE,SAAS,UAAU,SAAS;AACpC,QAAI,QAAQ,WAAW;AAAQ;AAC/B,UAAM,EAAE,gBAAgB,QAAQ;AAChC,QAAI,CAAC;AAAa;AAClB,UAAM,UAAU,KAAK,oBAAoB;AACzC,QAAI,OAAO,YAAY,aAAa,SAAS;AACzC,UAAI;AACA,cAAM,KAAK,sBAAO;AAClB,cAAM,EAAE,UAAU,aAAa;AAE/B,cAAM,OAAO,MAAM,GAAG,WAA6B,IAAI,6BAAc,CAAC,UAAS,UAAS,QAAQ,MAAK,kBAAkB,YAAY,MAAK,iBAAiB;AACzJ,YAAI,QAAQ;AAAM,iBAAO,KAAK,SAAS,OAAO;AAE9C,eAAO,SAAS,OAAO,KAAK,KAAK,EAAE,SAAS,YAAY,QAAQ,gBAAgB,WAAW,sBAAsB,UAAU,sBAAsB,QAAQ;AAAA,eACpJ,KAAP;AACE,gBAAQ,IAAI,KAAK;AACjB,eAAO,SAAS,OAAO,KAAK,KAAK,EAAE,SAAS,wBAAwB,QAAQ,qBAAqB,WAAW,mBAAmB,UAAU,QAAQ,QAAQ;AAAA;AAC5J;AAAA;AACJ;AAAA;AAAA;",
  "names": []
}
