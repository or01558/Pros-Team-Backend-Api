{
  "version": 3,
  "sources": ["../../../src/layers/Database.ts"],
  "sourcesContent": ["import { ErrorRequestHandler } from \"express\";\r\nimport { ParamsDictionary } from \"express-serve-static-core\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport fs from \"fs\";\r\nimport { ParsedQs } from \"qs\";\r\nimport Layer from \"../classes/Layer.js\";\r\nimport Server, { Layers } from \"../classes/Server.js\";\r\nimport UserObject from \"../rest/database/objects/users/UserObject.js\";\r\n\r\nexport default class Database extends Layer<Layers.Database>{\r\n    public selfCall: ErrorRequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>> = async (data, req, res, next) => {\r\n        const database = data.database;\r\n        req.body.userId = \"1k22kk2k\";\r\n        next();\r\n       /* if (!database.isConnected()) return res.status(503).send({ message: \"Service Unavailable\", reason: \"Api Services Failed\", requested: \"Api Resource\", provided: \"valid information\", status: 503 });;\r\n\r\n        if (!req.headers[\"authorization\"]) return res.status(401).send({ message: \"Unauthorized\", reason: \"No Authorization Header\", requested: \"User Resource\", provided: \"none authorization\", status: 401 });\r\n\r\n        const auth = req.headers['authorization'].split(' ');\r\n        const authType = auth[0];\r\n        const accessToken = auth[1];\r\n\r\n        if (authType !== \"Bearer\") return res.status(403).send({ message: \"Unauthorized\", reason: \"Invalid Authorization\", requested: \"User Resource\", provided: \"invalid authorization type\", status: 403 });\r\n\r\n        if (!accessToken) return res.status(401).send({ message: \"Unauthorized\", reason: \"No Authorization Token\", requested: \"User Resource\", provided: \"none access token\", status: 401 });\r\n\r\n        try {\r\n            const tokenData = jwt.verify(accessToken, fs.readFileSync(\"../../private.key\").toString().replace(\"-----BEGIN RSA PRIVATE KEY-----\\r\\n\", \"\").replace(\"\\n-----END RSA PRIVATE KEY-----\", \"\").replace(\"//LG7a5vljVVC\", \"\"));\r\n            if (typeof tokenData !== \"string\") {\r\n                const { id, serverCertificate, sign } = tokenData;\r\n                if (id) {\r\n                    const user = await Server.Database.getObject(new UserObject(id));\r\n                    if (!user) return res.status(403).send({ message: \"Unauthenticated\", reason: \"Invalid Authentication\", requested: \"User Resource\", provided: \"invalid user id\", status: 403 });\r\n                    req.body.userId = id;\r\n                } else if (serverCertificate && sign) {\r\n                    if (sign !== fs.readFileSync(\"../../certificate.key\").toString().replace(\"-----BEGIN CERTIFICATE REQUEST-----\\r\\n\", \"\").replace(\"\\n-----END CERTIFICATE REQUEST-----\", \"\")) return res.status(403).send({ message: \"Unauthenticated\", reason: \"Invalid Authentication\", requested: \"Api Resource\", provided: \"invalid certificate key\", status: 403 });\r\n                    req.body.userId = null;\r\n                } else return res.status(401).send({ message: \"Unauthenticated\", reason: \"Invalid Authentication\", requested: \"Server Resource\", provided: \"missing authentication details\", status: 403 });\r\n                next();\r\n            } else return res.status(401).send({ message: \"Unauthenticated\", reason: \"Invalid Authentication\", requested: \"Server Resource\", provided: \"invalid authentication details\", status: 403 });;\r\n        } catch (err: unknown) {\r\n            if (err instanceof jwt.TokenExpiredError) return res.status(401).send({ message: \"Unauthenticated\", reason: \"Invalid Authentication\", requested: \"Server Resource\", provided: \"access token expired \", status: 401 });\r\n            else {\r\n                console.log(err, \"server error\");\r\n                return res.status(500).send({ message: \"Something Went Wrong\", reason: \"An Error Occurred\", requested: \"Server Resource\", provided: \"none\", status: 500 });\r\n            };\r\n        };*/\r\n    };\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAKA,mBAAkB;AAIlB,uBAAsC,qBAAsB;AAAA,EACjD,WAA2F,OAAO,MAAM,KAAK,KAAK,SAAS;AAC9H,UAAM,WAAW,KAAK;AACtB,QAAI,KAAK,SAAS;AAClB;AAAA;AAAA;",
  "names": []
}
