{
  "version": 3,
  "sources": ["../../../src/layers/Analizer.ts"],
  "sourcesContent": ["import fs from \"fs\";\r\nimport path from \"path\";\r\nimport Layer from \"../classes/Layer.js\";\r\nimport { isUserResource } from \"../rest/resources/Resources.js\";\r\nimport NodeRSA from 'node-rsa';\r\nimport { ErrorRequestHandler } from \"express\";\r\nimport { ParamsDictionary } from \"express-serve-static-core\";\r\nimport { ParsedQs } from \"qs\";\r\n\r\nconst __dirname = process.cwd();\r\n\r\nexport default class Analizier extends Layer {\r\n    public selfCall: ErrorRequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>> = (data, req, res, next) => {\r\n        const body = req.body;\r\n        const { userId, requestData } = body;\r\n        let resourceData = null;\r\n\r\n        if (data.format === \"json\") {\r\n            if (!userId && isUserResource(req.path)) {\r\n                return res.status(403).json({ message: \"Missing Access\", reason: \"Client not logged in\", requested: \"user resource\", provided: \"none token\", status: 403 });\r\n            };\r\n\r\n            if (req.headers[\"content-type\"] !== \"application/json\")\r\n                return res.status(415).json({ message: \"Not A Json Format\", reason: \"Server dosen't know this format\", requested: \"api resource\", provided: \"invalid content type\", status: 415 });\r\n\r\n            if (req.method !== \"GET\" && !requestData)\r\n                return res.status(400).json({ message: \"Server Failed\", reason: \"Can't analize the request\", requested: \"none get request\", provided: \"none request data\", status: 400 });\r\n\r\n            if (req.method !== \"GET\") {\r\n                const privateKey = new NodeRSA(fs.readFileSync(path.resolve(__dirname, \"../server.key\")), \"private\");\r\n                const encrypted = data.decrypt(requestData);\r\n                const json = privateKey.decrypt(encrypted).toString();\r\n                resourceData = JSON.parse(json);\r\n                // @ts-expect-error\r\n                req.resourceData = resourceData;\r\n                this.request = req;\r\n                this.response = res;\r\n                this.finish();\r\n            };\r\n\r\n            this.request = req;\r\n            this.response = res;\r\n            this.finish();\r\n            next();\r\n        }\r\n        else {\r\n            //other formats may come in the future...\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=Analizer.js.map"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,kBAAiB;AACjB,mBAAkB;AAClB,uBAA+B;AAC/B,sBAAoB;AAKpB,MAAM,YAAY,QAAQ;AAE1B,wBAAuC,qBAAM;AAAA,EAClC,WAA2F,CAAC,MAAM,KAAK,KAAK,SAAS;AACxH,UAAM,OAAO,IAAI;AACjB,UAAM,EAAE,QAAQ,gBAAgB;AAChC,QAAI,eAAe;AAEnB,QAAI,KAAK,WAAW,QAAQ;AACxB,UAAI,CAAC,UAAU,qCAAe,IAAI,OAAO;AACrC,eAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS,kBAAkB,QAAQ,wBAAwB,WAAW,iBAAiB,UAAU,cAAc,QAAQ;AAAA;AACxJ;AAED,UAAI,IAAI,QAAQ,oBAAoB;AAChC,eAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS,qBAAqB,QAAQ,mCAAmC,WAAW,gBAAgB,UAAU,wBAAwB,QAAQ;AAEhL,UAAI,IAAI,WAAW,SAAS,CAAC;AACzB,eAAO,IAAI,OAAO,KAAK,KAAK,EAAE,SAAS,iBAAiB,QAAQ,6BAA6B,WAAW,oBAAoB,UAAU,qBAAqB,QAAQ;AAEvK,UAAI,IAAI,WAAW,OAAO;AACtB,cAAM,aAAa,IAAI,wBAAQ,kBAAG,aAAa,oBAAK,QAAQ,WAAW,mBAAmB;AAC1F,cAAM,YAAY,KAAK,QAAQ;AAC/B,cAAM,OAAO,WAAW,QAAQ,WAAW;AAC3C,uBAAe,KAAK,MAAM;AAE1B,YAAI,eAAe;AACnB,aAAK,UAAU;AACf,aAAK,WAAW;AAChB,aAAK;AAAA;AACR;AAED,WAAK,UAAU;AACf,WAAK,WAAW;AAChB,WAAK;AACL;AAAA,WAEC;AAAA;AAAA;AAAA;",
  "names": []
}
