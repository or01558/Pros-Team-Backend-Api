{
  "version": 3,
  "sources": ["../../../src/classes/Server.ts"],
  "sourcesContent": ["import express from \"express\";\r\nimport cors from \"cors\";\r\nimport helmet from \"helmet\";\r\nimport bodyParser from \"body-parser\";\r\nimport Data_Structures from \"../../Data-Structures/src/index.js\";\r\nimport RESTApi from \"../rest/RESTApi.js\";\r\nimport Layer from \"../classes/Layer.js\";\r\nimport ServerRouter from \"./ServerRouter.js\";\r\nimport Database from \"../rest/database/Database.js\";\r\nimport Network, { Layer as NetworkLayer } from \"./Network.js\";\r\n\r\nexport enum Policies {\r\n    Private = \"private\",\r\n    None = \"Not Defined\"\r\n}\r\n\r\nexport enum Layers {\r\n    Connection = \"connection\",\r\n    RESTApi = \"api\",\r\n    Database = \"database\",\r\n    Analizier = \"analizing\",\r\n}\r\n\r\nexport enum Constants {\r\n    Default_Port = process.env.DEFAULT_PORT ? parseInt(process.env.DEFAULT_PORT) : 80\r\n}\r\n\r\n\r\nexport interface NetworkLayers {\r\n    createNew(Type: Layers, layer: Layer): NetworkLayer;\r\n}\r\n\r\nexport default class Server {\r\n    public static Database: Database;\r\n\r\n    public expressApp: express.Express;\r\n    private restApi: RESTApi;\r\n    private router: ServerRouter;\r\n    private port: number;\r\n    private whitelist: Data_Structures.List<string> | null;\r\n    private policy: Policies;\r\n    private corsPolicy: cors.CorsOptions;\r\n    private static layers: Data_Structures.List<{ type: Layers, layer: Layer }>;\r\n\r\n    public static createLayer(type: Layers) {\r\n        const With = Server.layers.findOne((v) => v?.type === type);\r\n        return With ? With.layer : null;\r\n    };\r\n\r\n    constructor(restApi: RESTApi, port?: number) {\r\n        Server.Database = new Database(new Database.Client());\r\n        Server.layers = new Data_Structures.List<{ type: Layers, layer: any }>();\r\n        this.expressApp = express();\r\n        this.restApi = restApi;\r\n        this.port = port || -1;\r\n        this.whitelist = null;\r\n        this.policy = Policies.None;\r\n        this.corsPolicy = {};\r\n        this.getRESTApi.bind(this);\r\n        this.getRouter.bind(this);\r\n        this.getPort.bind(this);\r\n        this.getWhitelist.bind(this);\r\n        this.getPolicy.bind(this);\r\n        this.getCorsPolicy.bind(this);\r\n        this.setRouter.bind(this);\r\n        this.setPort.bind(this);\r\n        this.setWhitelist.bind(this);\r\n        this.setPolicy.bind(this);\r\n        this.setCorsPolicy.bind(this);\r\n        this.listen.bind(this);\r\n        this.addLayer.bind(this);\r\n        this.#onLayerFinished.bind(this);\r\n        this.run.bind(this);\r\n        this.verifyIp.bind(this);\r\n    };\r\n\r\n\r\n    public getRESTApi(): RESTApi {\r\n        return this.restApi;\r\n    }\r\n\r\n    public getRouter(): ServerRouter {\r\n        return this.router;\r\n    }\r\n\r\n    public getPort(): number {\r\n        return this.port;\r\n    }\r\n\r\n    public getWhitelist(): Data_Structures.List<string> | null {\r\n        return this.whitelist;\r\n    }\r\n\r\n    public getPolicy(): Policies {\r\n        return this.policy;\r\n    }\r\n\r\n    public getCorsPolicy(): cors.CorsOptions {\r\n        return this.corsPolicy;\r\n    }\r\n\r\n    public setRouter(router: ServerRouter): void {\r\n        this.#onLayerFinished(router.getLayer(), router.run);\r\n        this.router = router;\r\n    }\r\n\r\n    public setPort(port: number = Constants.Default_Port): void {\r\n        this.port = port;\r\n    }\r\n\r\n    public setWhitelist(list: Data_Structures.List<string>): void {\r\n        this.whitelist = list;\r\n    }\r\n\r\n    public setPolicy(policy: Policies): void {\r\n        this.policy = policy;\r\n    }\r\n\r\n    public setCorsPolicy(corsPolicy: cors.CorsOptions): void {\r\n        this.corsPolicy = corsPolicy;\r\n    }\r\n\r\n    public listen(callback?: (server: Server) => any, port: number = Constants.Default_Port) {\r\n        if (port && this.port == -1) this.setPort(port);\r\n        if (!this.port) throw new Error(\"ProsTeam ServerERROR: None Port has Provided!\");\r\n        this.expressApp.use(bodyParser.urlencoded({ extended: false }));\r\n        this.expressApp.use(bodyParser.json());\r\n        this.expressApp.use(helmet());\r\n        this.expressApp.use(cors(this.corsPolicy));\r\n        this.expressApp.use(this.verifyIp);\r\n        this.expressApp.disable(\"x-powered-by\");\r\n        this.expressApp.enable(\"trust proxy\");\r\n        callback?.(this);\r\n    }\r\n\r\n    public addLayer<T extends Layer = Layer>(For: string, Type: Layers, Layer: T) {\r\n        Server.layers.add({ type: Type, layer: Layer });\r\n        const network = new Network();\r\n        this.expressApp.use(For, (req, res, next) => {\r\n            if (Type === Layers.Connection) {\r\n                network.createNew(Type, Layer).pass({ socket: req.socket }, req, res, next);\r\n            } else if (Type === Layers.RESTApi) {\r\n                network.createNew(Type, Layer).pass({ api: this.restApi }, req, res, next);\r\n            } else if (Type === Layers.Database) {\r\n                network.createNew(Type, Layer).pass({ database: Server.Database }, req, res, next);\r\n            } else if (Type === Layers.Analizier) {\r\n                network.createNew(Type, Layer).pass({ decrypt: this.restApi.decrypt, format: \"json\" }, req, res, next);\r\n            };\r\n        });\r\n    }\r\n\r\n    #onLayerFinished(type: Layers, run: (app: express.Application, request: express.Request, response: express.Response, next: express.NextFunction) => any) {\r\n        const Network_Layer = Server.layers.findOne((nl) => nl?.type === type);\r\n        if (Network_Layer) Network_Layer.layer.on(\"finish\", (app: express.Application, request: express.Request, response: express.Response, next: express.NextFunction) => {\r\n            run(app, request, response, next);\r\n        });\r\n    };\r\n\r\n    public run(callback?: (server: Server) => any): void {\r\n        if (this.port == -1) throw new Error(\"ProsTeam ServerERROR: None Port has Provided!\");\r\n        const server = this.expressApp.listen(this.port, () => {\r\n            if (callback) callback(this);\r\n        });\r\n        server.keepAliveTimeout = (60 * 1000) + 1000;\r\n        server.headersTimeout = (60 * 1000) + 2000;\r\n    }\r\n\r\n    private readonly verifyIp: express.RequestHandler = (req, res, next) => {\r\n        console.log(\"verifing ip\");\r\n        const ip = req.headers[\"x-forwarded-for\"] ? req.headers[\"x-forwarded-for\"][0] : req.socket.remoteAddress;\r\n        console.log(\"ip verified\");\r\n        next();\r\n        /*  if (this.whitelist?.contains(ip || \"\")) {\r\n              console.log(\"ip verified\");\r\n              next();\r\n          } else {\r\n              next(new ServerError(\"ProsTeam ServerERROR\", \"Invalid Server Ip\"));\r\n          }*/\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
