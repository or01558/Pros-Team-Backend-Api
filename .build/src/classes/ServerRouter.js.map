{
  "version": 3,
  "sources": ["../../../src/classes/ServerRouter.ts"],
  "sourcesContent": ["import express from \"express\";\r\nimport { existsSync, readFileSync } from \"fs\";\r\nimport { pathToFileURL } from \"url\";\r\nimport RESTApi from \"../rest/RESTApi.js\";\r\nimport RequestHandler from \"./RequestHandler.js\";\r\nimport { Layers } from \"./Server.js\";\r\n\r\nconst __dirname = process.cwd();\r\n\r\nexport default class ServerRouter {\r\n\r\n    #rest: RESTApi;\r\n    #layer: Layers;\r\n\r\n    constructor(rest: RESTApi, layer: Layers) {\r\n        this.#rest = rest;\r\n        this.#layer = layer;\r\n        this.getRest.bind(this);\r\n        this.getLayer.bind(this);\r\n        this.run.bind(this);\r\n        this.endPoint.bind(this);\r\n    };\r\n\r\n\r\n    public getRest(): RESTApi {\r\n        return this.#rest;\r\n    };\r\n\r\n    public getLayer(): Layers {\r\n        return this.#layer;\r\n    };\r\n\r\n    public run = (app : express.Application, request : express.Request, response : express.Response, next : express.NextFunction) => {\r\n        const endPointRejex = /\\/resources\\/(.*)\\/?/;\r\n        const { originalUrl } = request;\r\n        const path = originalUrl;\r\n        if (!path.match(endPointRejex))\r\n            return response.status(404).send({ message: \"Resource Not Found\", reason: \"Invalid Resource Path\", requested: \"Server Resource\", provided: \"Invalid Server Resource\", status: 404 }); //...\r\n        else {\r\n            try {\r\n                const URL_PARTS = path.replace(\"/resources/\", \"\").split(\"/\").filter(value => value !== \"\");\r\n                const lastPartIndex = URL_PARTS.length - 1;\r\n                // @ts-expect-error\r\n                request.endPoint = URL_PARTS.filter((value, index) => index !== lastPartIndex).join(\"/\");\r\n                // @ts-expect-error\r\n                request.action = URL_PARTS[lastPartIndex];\r\n                this.endPoint(app, request, response, next);\r\n            }\r\n            catch (err) {\r\n                console.log(err, \"server error\");\r\n                return response.status(500).send({ message: \"Something Went Wrong\", reason: \"An Error Occurred\", requested: \"Server Resource\", provided: \"Server Resource\", status: 500 });\r\n            }\r\n        }\r\n    };\r\n    \r\n    public async endPoint(app : express.Application, request : express.Request, response : express.Response, next : express.NextFunction) {\r\n        let endPointFound = false;\r\n        // @ts-expect-error\r\n        let { endPoint, action } = request;\r\n        const rootPath = `${__dirname}/src/rest/resources/${endPoint}`;\r\n        const configPath = `${rootPath}\\\\endpoints_config.json`;\r\n        if (!existsSync(configPath)) return response.status(404).send({ message: \"Resource Not Found\", reason: \"Invalid Resource\", requested: \"Server Resource\", provided: \"Server Resource\", status: 404 });\r\n        const endpoints_config = JSON.parse(readFileSync(`${rootPath}\\\\endpoints_config.json`, \"utf8\").replace(new RegExp(\"\\n | \\r\"), \"\"));\r\n        const endPointsNames = endpoints_config.endPoints;\r\n        for (const endPointName of endPointsNames) {\r\n            const fileName = `${action.replace(action[0], action[0].toUpperCase())}${endPointName}`;\r\n            const handlerPath = `${rootPath}/${fileName}.js`;\r\n            if (!existsSync(handlerPath))\r\n                continue;\r\n            endPointFound = true;\r\n            const module = await import(pathToFileURL(handlerPath).toString());\r\n            const Handler : typeof RequestHandler = module.default;\r\n            // @ts-expect-error\r\n            new Handler(request, response, next);\r\n        }\r\n        ;\r\n        if (!endPointFound)\r\n            return response.status(404).send({ message: \"Resource Not Found\", reason: \"Invalid Resource\", requested: \"Server Resource\", provided: \"Server Resource\", status: 404 });\r\n    }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,gBAAyC;AACzC,iBAA8B;AAK9B,MAAM,YAAY,QAAQ;AAE1B,mBAAkC;AAAA;AAAA;AAAA,EAK9B,YAAY,MAAe,OAAe;AACtC,iBAAa;AACb,kBAAc;AACd,SAAK,QAAQ,KAAK;AAClB,SAAK,SAAS,KAAK;AACnB,SAAK,IAAI,KAAK;AACd,SAAK,SAAS,KAAK;AAAA;AAAA,EAIhB,UAAmB;AACtB,WAAO;AAAA;AAAA,EAGJ,WAAmB;AACtB,WAAO;AAAA;AAAA,EAGJ,MAAM,CAAC,KAA2B,SAA2B,UAA6B,SAAgC;AAC7H,UAAM,gBAAgB;AACtB,UAAM,EAAE,gBAAgB;AACxB,UAAM,OAAO;AACb,QAAI,CAAC,KAAK,MAAM;AACZ,aAAO,SAAS,OAAO,KAAK,KAAK,EAAE,SAAS,sBAAsB,QAAQ,yBAAyB,WAAW,mBAAmB,UAAU,2BAA2B,QAAQ;AAAA,SAC7K;AACD,UAAI;AACA,cAAM,YAAY,KAAK,QAAQ,eAAe,IAAI,MAAM,KAAK,OAAO,WAAS,UAAU;AACvF,cAAM,gBAAgB,UAAU,SAAS;AAEzC,gBAAQ,WAAW,UAAU,OAAO,CAAC,OAAO,UAAU,UAAU,eAAe,KAAK;AAEpF,gBAAQ,SAAS,UAAU;AAC3B,aAAK,SAAS,KAAK,SAAS,UAAU;AAAA,eAEnC,KAAP;AACI,gBAAQ,IAAI,KAAK;AACjB,eAAO,SAAS,OAAO,KAAK,KAAK,EAAE,SAAS,wBAAwB,QAAQ,qBAAqB,WAAW,mBAAmB,UAAU,mBAAmB,QAAQ;AAAA;AAAA;AAAA;AAAA,QAKnK,SAAS,KAA2B,SAA2B,UAA6B,MAA6B;AAClI,QAAI,gBAAgB;AAEpB,QAAI,EAAE,UAAU,WAAW;AAC3B,UAAM,WAAW,GAAG,gCAAgC;AACpD,UAAM,aAAa,GAAG;AACtB,QAAI,CAAC,0BAAW;AAAa,aAAO,SAAS,OAAO,KAAK,KAAK,EAAE,SAAS,sBAAsB,QAAQ,oBAAoB,WAAW,mBAAmB,UAAU,mBAAmB,QAAQ;AAC9L,UAAM,mBAAmB,KAAK,MAAM,4BAAa,GAAG,mCAAmC,QAAQ,QAAQ,IAAI,OAAO,YAAY;AAC9H,UAAM,iBAAiB,iBAAiB;AACxC,eAAW,gBAAgB,gBAAgB;AACvC,YAAM,WAAW,GAAG,OAAO,QAAQ,OAAO,IAAI,OAAO,GAAG,iBAAiB;AACzE,YAAM,cAAc,GAAG,YAAY;AACnC,UAAI,CAAC,0BAAW;AACZ;AACJ,sBAAgB;AAChB,YAAM,UAAS,MAAM,OAAO,8BAAc,aAAa;AACvD,YAAM,UAAkC,QAAO;AAE/C,UAAI,QAAQ,SAAS,UAAU;AAAA;AAEnC;AACA,QAAI,CAAC;AACD,aAAO,SAAS,OAAO,KAAK,KAAK,EAAE,SAAS,sBAAsB,QAAQ,oBAAoB,WAAW,mBAAmB,UAAU,mBAAmB,QAAQ;AAAA;AAAA;",
  "names": []
}
