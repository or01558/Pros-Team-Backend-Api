{
  "version": 3,
  "sources": ["../../../src/generators/KeyGenerator.ts"],
  "sourcesContent": ["import Data_Structures from \"../../Data-Structures/src/index.js\";\r\nimport getRandomInt from \"../functions/getRandomInt.js\";\r\n\r\nconst { List } = Data_Structures;\r\n\r\nconst signs: Data_Structures.List<string> = new List<string>();\r\nconst numbers: Data_Structures.List<string> = new List<string>();\r\nconst letters: Data_Structures.List<string> = new List<string>();\r\nsigns.add(\"$\");\r\nsigns.add(\"#\");\r\nsigns.add(\"%\");\r\nsigns.add(\"@\");\r\nsigns.add(\"^\");\r\nsigns.add(\"&\");\r\nsigns.add(\"*\");\r\nsigns.add(\"(\");\r\nsigns.add(\")\");\r\nfor (let i: number = 0; i <= 9; i++) {\r\n    numbers.add(i.toString());\r\n};\r\nfor (let i: number = 65; i <= 90; i++) {\r\n    letters.add(String.fromCharCode(i));\r\n};\r\nfor (let i: number = 97; i <= 122; i++) {\r\n    letters.add(String.fromCharCode(i));\r\n};\r\n\r\n\r\nexport default class KeyGenerator {\r\n\r\n    constructor(){\r\n        this.generate.bind(this);\r\n        this.genarateChars.bind(this);\r\n    };\r\n    \r\n    generate(): string {\r\n        let keys: Data_Structures.List<Data_Structures.List<string>> = new List<Data_Structures.List<string>>();\r\n        for (let i: number = 0; i < 16; i++) {\r\n            const count: number = getRandomInt(1, 2);\r\n\r\n            for (let j = 0; j < count; j++) {\r\n                const chance: number = getRandomInt(1, 3);\r\n                if (chance == 1) {\r\n                    keys.add(this.genarateChars(signs, true));\r\n                } else if (chance == 2) {\r\n                    keys.add(this.genarateChars(numbers, true));\r\n                } else if (chance == 3) {\r\n                    keys.add(this.genarateChars(letters, true));\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return keys.toString();\r\n    }\r\n\r\n    private genarateChars(chars: Data_Structures.List<string>, randomCount?: boolean): Data_Structures.List<string> {\r\n        const generated: Data_Structures.List<string> = new List<string>();\r\n\r\n        const chance = randomCount ? getRandomInt(1, 2) : 1;\r\n\r\n        for (let j: number = 0; j < chance; j++) {\r\n            let charIndex: number = Math.floor(Math.random() * chars.size);\r\n            let char: string = chars.get(charIndex) || \"\";\r\n            while (!char) {\r\n                charIndex = Math.floor(Math.random() * chars.size);\r\n                char = chars.get(charIndex) || \"\";\r\n            };\r\n            generated.add(char);\r\n        };\r\n\r\n        return generated;\r\n    };\r\n}\r\n\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,iBAA4B;AAC5B,0BAAyB;AAEzB,MAAM,EAAE,SAAS;AAEjB,MAAM,QAAsC,IAAI;AAChD,MAAM,UAAwC,IAAI;AAClD,MAAM,UAAwC,IAAI;AAClD,MAAM,IAAI;AACV,MAAM,IAAI;AACV,MAAM,IAAI;AACV,MAAM,IAAI;AACV,MAAM,IAAI;AACV,MAAM,IAAI;AACV,MAAM,IAAI;AACV,MAAM,IAAI;AACV,MAAM,IAAI;AACV,SAAS,IAAY,GAAG,KAAK,GAAG,KAAK;AACjC,UAAQ,IAAI,EAAE;AAAA;AACjB;AACD,SAAS,IAAY,IAAI,KAAK,IAAI,KAAK;AACnC,UAAQ,IAAI,OAAO,aAAa;AAAA;AACnC;AACD,SAAS,IAAY,IAAI,KAAK,KAAK,KAAK;AACpC,UAAQ,IAAI,OAAO,aAAa;AAAA;AACnC;AAGD,mBAAkC;AAAA,EAE9B,cAAa;AACT,SAAK,SAAS,KAAK;AACnB,SAAK,cAAc,KAAK;AAAA;AAAA,EAG5B,WAAmB;AACf,QAAI,OAA2D,IAAI;AACnE,aAAS,IAAY,GAAG,IAAI,IAAI,KAAK;AACjC,YAAM,QAAgB,iCAAa,GAAG;AAEtC,eAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,cAAM,SAAiB,iCAAa,GAAG;AACvC,YAAI,UAAU,GAAG;AACb,eAAK,IAAI,KAAK,cAAc,OAAO;AAAA,mBAC5B,UAAU,GAAG;AACpB,eAAK,IAAI,KAAK,cAAc,SAAS;AAAA,mBAC9B,UAAU,GAAG;AACpB,eAAK,IAAI,KAAK,cAAc,SAAS;AAAA;AAAA;AAAA;AAMjD,WAAO,KAAK;AAAA;AAAA,EAGR,cAAc,OAAqC,aAAqD;AAC5G,UAAM,YAA0C,IAAI;AAEpD,UAAM,SAAS,cAAc,iCAAa,GAAG,KAAK;AAElD,aAAS,IAAY,GAAG,IAAI,QAAQ,KAAK;AACrC,UAAI,YAAoB,KAAK,MAAM,KAAK,WAAW,MAAM;AACzD,UAAI,OAAe,MAAM,IAAI,cAAc;AAC3C,aAAO,CAAC,MAAM;AACV,oBAAY,KAAK,MAAM,KAAK,WAAW,MAAM;AAC7C,eAAO,MAAM,IAAI,cAAc;AAAA;AAClC;AACD,gBAAU,IAAI;AAAA;AACjB;AAED,WAAO;AAAA;AAAA;",
  "names": []
}
