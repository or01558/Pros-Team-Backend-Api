{
  "version": 3,
  "sources": ["../../../Data_Strcutures/src/index.ts"],
  "sourcesContent": ["namespace Data_Structures {\n\n  export interface IObjectKeys {\n    [key: string]: any;\n  }\n\n  export class List<T> extends Object {\n    public size: number;\n    private lst: List<T> | null;\n    private values: Array<T | null>;\n\n    constructor() {\n      super();\n      this.size = 0;\n      this.lst = null;\n      this.values = [];\n    };\n\n    public readonly set = (index: number, value: T | null) => {\n      this.values[index] = value;\n      return this;\n    };\n\n    public readonly add = (value: T | null) => {\n      const values = this.values;\n      if (values.length == 0) values.unshift(value);\n      else values.push(value);\n      this.size++;\n      if (this.lst) this.lst.add(value);\n      return this;\n    };\n\n    public readonly remove = (index: number) => {\n      const values = this.values;\n      const arr = [];\n\n      for (let i = 0; i < values.length; i++) {\n\n        if (i != index) {\n\n          const value = values[i];\n          if (arr.length == 0) arr.unshift(value);\n          else arr.push(value);\n\n        }\n      }\n\n      this.values = arr;\n      if (this.lst) this.lst.remove(index);\n      this.size--;\n      return this;\n    };\n\n    public readonly indexOf = (value: T) => {\n      const values = this.values;\n\n      for (let i = 0; i < values.length; i++) {\n\n        if (values[i] === value)\n          return i;\n\n      };\n\n      return -1;\n    }\n\n    public readonly getIndexIf = (condition: (value: T | null) => boolean) => {\n      const values = this.values;\n\n      for (let i = 0; i < values.length; i++) {\n\n        if (condition(values[i]))\n          return i;\n\n      };\n\n      return -1;\n    }\n\n    public readonly forEach = (callback: (value: T | null) => void) => {\n      for (let i = 0; i < this.size; i++) {\n        callback(this.values[i]);\n      }\n      return this;\n    };\n\n\n    public readonly delete = (condition: (value: T | null) => boolean) => {\n      const values = this.values;\n\n      for (let i = 0; i < values.length; i++) {\n        if (condition(values[i])) {\n          this.remove(i);\n          if (this.lst) this.lst.remove(i);\n        }\n      };\n      return this;\n    };\n\n    public readonly first = () => {\n      return this.values[0] || null;\n    };\n\n    public readonly get = (index: number) => {\n      return this.values[index] || null;\n    };\n\n    public readonly find = (condition: (value: T | null) => boolean) => {\n      const values = this.values;\n      const results = [];\n\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (condition(value)) {\n          if (results.length == 0) {\n            results.unshift(value);\n          } else results.push(value);\n        };\n      };\n\n      return results;\n    };\n\n    public readonly findOne = (condition: (value: T | null) => boolean) => {\n      const values = this.values;\n\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (condition(value)) return value;\n      };\n\n      return null;\n    };\n\n    public readonly contains = (value: T | null) => {\n      const values = this.values;\n\n      for (let i = 0; i < values.length; i++) {\n        if (value === values[i]) return true;\n      };\n\n      return false;\n    };\n\n    public readonly exists = (condition: (value: T | null) => boolean) => {\n      const values = this.values;\n\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (condition(value)) return true;\n      };\n\n      return false;\n    };\n\n    public readonly clear = () => {\n      this.values = [];\n      this.size = 0;\n      return this;\n    };\n\n    private readonly addReference = (source: List<T>) => {\n      const values = this.values;\n\n      for (let i = 0; i < values.length; i++) {\n        source.add(values[i]);\n      }\n    };\n\n    private readonly createReference = (lst: List<T>) => {\n      this.addReference(lst);\n      this.lst = lst;\n    };\n\n    public readonly mergeWith = (lst: List<T>) => {\n      lst.createReference(this);\n      return this;\n    };\n\n    public static readonly notNULL = (list: List<any>) => {\n      return this.length == 0;\n    };\n\n    public readonly equals = (list: List<T>) => {\n      if (this.size !== list.size) return false;\n      let i: number = 0;\n\n      this.forEach((v) => {\n        if (list.get(i) !== v) return false;\n        i++;\n      });\n\n      return true;\n    };\n\n    public override toString(): string {\n      let str: string = \"\";\n      for (let i = 0; i < this.values.length; i++) {\n        str += this.values[i];\n      }\n      return str;\n    }\n\n    public toArray(): (T | null)[] {\n      return this.values;\n    };\n\n  }\n\n};\n\nexport default Data_Structures;"],
  "mappings": "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",
  "names": []
}
