{
  "version": 3,
  "sources": ["../../../Data_Strcutures/src/index.d.ts"],
  "sourcesContent": ["declare namespace Data_Structures {\n\n    export interface IObjectKeys {\n        [key: string]: any;\n    }\n\n    export class List<T>{\n        public size: number;\n        private lst: List<T> | null;\n        private values: Array<T | null>;\n\n        public readonly set: (index: number, value: T | null) => List<T>;\n\n        public readonly add: (value: T | null) => List<T>;\n\n        public readonly remove: (index: number) => List<T>;\n\n        public readonly indexOf: (value: T) => number;\n\n        public readonly getIndexIf: (condition: (value: T | null) => boolean) => number;\n\n        public readonly forEach: (callback: (value: T | null) => void) => List<T>;\n\n        public readonly delete: (condition: (value: T | null) => boolean) => List<T>;\n\n        public readonly first: () => T | null;\n\n        public readonly get: (index: number) => T | null;\n\n        public readonly find: (condition: (value: T | null) => boolean) => Array<T | null>;\n\n        public readonly findOne: (condition: (value: T | null) => boolean) => T | null;\n\n        public readonly contains: (value: T | null) => boolean;\n\n        public readonly exists: (condition: (value: T | null) => boolean) => boolean;\n\n        public readonly clear: () => List<T>;\n\n        private readonly addReference: (source: List<T>) => void;\n\n        private readonly createReference: (lst: List<T>) => void;\n\n        public readonly mergeWith: (lst: List<T>) => List<T>;\n\n        private readonly executeFunction: (name: string, value: T | null | number | ((value: T | null) => boolean)) => void;\n\n        public static readonly notNULL: (list: List<any>) => boolean;\n\n        public readonly equals: (list: List<any>) => boolean;\n\n        public readonly toString: () => string;\n        public readonly toArray: () => (T | null)[];\n\n\n    }\n\n}\n\nexport default Data_Structures;"],
  "mappings": ";;AAAA;",
  "names": []
}
